name: IP 解析与JSON生成

# 工作流触发条件（可按需修改）
on:
  # 1. 手动触发（在GitHub仓库的Actions页面点击运行）
  workflow_dispatch:
  # 2. 定时触发（每天UTC时间0点运行，语法：分 时 日 月 星期）
 # schedule:
 #   - cron: '0 0 * * *'
  # 3. 当goodip文件被推送到main分支时触发
  push:
    branches: [ main ]
    paths: [ 'goodips' ]

jobs:
  parse-ip:
    # 运行环境（使用最新Ubuntu）
    runs-on: ubuntu-latest
    steps:
      # 步骤1：拉取仓库代码到工作流环境
      - name: 检出仓库代码
        uses: actions/checkout@v4

      # 步骤2：设置Python环境（指定版本，如3.10）
      - name: 设置Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.10'
        #  cache: 'pip'  # 缓存pip依赖，加速运行

      # 步骤3：（可选）安装依赖（若脚本需额外库，如requests，可添加）
      # - name: 安装依赖
      #   run: pip install requests

      # 步骤4：执行Python脚本解析IP（需确保脚本已在仓库中，即之前的完整代码）
      - name: 解析goodip文件
        run: python split.py  # 假设之前的完整代码保存为split.py

      # 步骤5：将生成的JSON文件提交并推回仓库
      - name: 提交JSON文件到仓库
        run: |
        git config --local user.email "actions@github.com"
        git config --local user.name "GitHub Action"
        if [ -n "$(git status --porcelain)" ]; then
          git add ip_info.json
          git commit -m "Automatic update"
          git push
        else
          echo "No changes detected, skipping commit."
        fi
